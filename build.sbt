import com.scalapenos.sbt.prompt._
import sbt.{IO, ConsoleLogger}
import sbt.Keys._
import scoverage.ScoverageSbtPlugin.ScoverageKeys.coverageExcludedPackages

name := "starship-tractorbeam"

organization in ThisBuild := "com.rallyhealth.starship"

//
// Scala & Compiler options
//
scalaVersion in ThisBuild := StarshipDependencies.scalaVersion

scalacOptions in ThisBuild := Seq(
  "-Xfatal-warnings",
  "-feature",
  "-deprecation",
  "-unchecked"
)

lazy val useProjectScalaVersion = Seq(
  ivyScala := ivyScala.value map { _.copy(overrideScalaVersion = true) }
)

//
// Global settings
//
promptTheme in ThisBuild := Prompt.starshipPrompt

//
// Project & Module setup
//
lazy val IntegrationTestWithUnitTestAsDep = config("it") extend Test

def baseStarshipProject(
  id: String,
  base: File,
  settings: Seq[Def.Setting[_]] = Seq.empty,
  dependencies: Seq[ModuleID] = Seq.empty
): Project =
  Project(id = id, base = base, settings = settings)
    .configs(IntegrationTestWithUnitTestAsDep)
    .settings(useProjectScalaVersion)
    .settings(Defaults.itSettings : _*)
    .settings(libraryDependencies ++= dependencies :+ filters)
    .settings(coverageExcludedPackages := ".*module.*;")
    .enablePlugins(SemVerPlugin)
    // See https://github.com/AudaxHealthInc/rally-versioning#semverversionlimit
    .settings(semVerVersionLimit := "0.999.999")

lazy val model = baseStarshipProject("model", file("model"), dependencies = StarshipDependencies.model)
  .settings(coverageExcludedPackages := "com\\.careverge\\.messaging.*")

lazy val client = baseStarshipProject("client", file("client"), dependencies = StarshipDependencies.client)
  .dependsOn(model)
  .settings(coverageExcludedPackages := "com\\.careverge\\.messaging.*")

lazy val backend = baseStarshipProject("backend", file("backend"), dependencies = StarshipDependencies.backend)
  .dependsOn(model, client)
  .settings(coverageExcludedPackages := "com\\.careverge\\.messaging.*")

lazy val webApp = baseStarshipProject("webtractorbeam", file("web/tractorbeam"), dependencies = StarshipDependencies.web)
  .dependsOn(model, backend)
  .enablePlugins(RallyDockerSbtPlugin)
  .settings(PlayKeys.playDefaultPort := 18553)
  .settings(publish := {}, publishLocal := {})
  .settings(coverageExcludedPackages := "<empty>;Reverse.*;views.html.*")
  .settings(generateVersion)
  .settings(rallyDockerAppImageName := "engine/tractorbeam")
  .settings(rallyDockerAppFromImage := "docker.werally.in/mongo3-java-app:8")
  .settings(rallyDockerAppPackageNewRelic := false)
  .settings(javaOptions in Test += "-Dmongodb.evolution.enabled=false")

lazy val root = project.in(file(".")).configs( IntegrationTestWithUnitTestAsDep )
  .aggregate(webApp, model, backend, client) // To build root, make sure all the other projects are built
  .settings(
    // The following two settings ensure that the root isn't published as a jar.
    publishLocal := {},
    publish := {},
    promptTheme := Prompt.starshipPrompt
  )
  .settings( Defaults.itSettings : _*)

//
// External dependencies
//
resolvers in ThisBuild ++= Seq(
  "Artifactory Libs Release" at "https://artifacts.werally.in/artifactory/libs-release",
  "Artifactory External Snapshots" at "https://artifacts.werally.in/artifactory/ext-snapshot-local",
  Resolver.url("ivy-libs-snapshot", new URL("https://artifacts.werally.in/artifactory/ivy-libs-snapshot"))(Resolver.ivyStylePatterns),
  Resolver.mavenLocal
)

//
// Other settings
//

// enables integration tests
Defaults.itSettings

testForkedParallel in ThisBuild := false
fork in ThisBuild := false
parallelExecution in ThisBuild := false

// Make sure the root isn't published
publishArtifact := false

ignoreDirty := true

def generateVersion = resourceGenerators in Compile <+=
  (resourceManaged in Compile, version, name) map { (dir, ver, name) =>
    val log = ConsoleLogger()
    val props = new java.util.Properties()
    props.setProperty("Version", ver)
    props.setProperty("Name", name)
    props.setProperty("Created", System.currentTimeMillis().toString)

    val file = dir / "rally-version.properties"
    log.info(s"Writing version file $file")
    IO.write(props, "generated by sbt", file)
    Seq(file)
  }
