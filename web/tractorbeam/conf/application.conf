# This is the main configuration file for the application.
# ~~~~~

# Note that the application.secret is loaded in the GlobalSettings object.

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
application.global= com.rallyhealth.starship.config.StarshiptractorbeamGlobalSetting

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled
# And note that mongodb.evolution.mongoCmd is set in the GlobalSettings object.

# Mongodb Evolutions Plugin
# ~~~~~
# Override the below as provided in https://www.playframework.com/documentation/2.3.x/ProductionConfiguration
# a) Specific configuration keys section or
# b) Alternative configuration file or
# c) Using environment variables
#
mongodb.evolution.enabled=true
mongodb.evolution.enabled=${?MONGODB_EVOLUTION_ENABLED}
mongodb.evolution.applyProdEvolutions=false
mongodb.evolution.applyProdEvolutions=${?MONGODB_EVOLUTION_PROD_UP}
mongodb.evolution.applyDownEvolutions=false
mongodb.evolution.applyDownEvolutions=${?MONGODB_EVOLUTION_PROD_DOWN}
mongodb.evolution.useLocks=true
mongodb.evolution.useLocks=${?MONGODB_EVOLUTION_USELOCK}

#
# Rally standard actor configuration
#
akka {
  actor {
    default-dispatcher {
      type = "com.rallyhealth.argosy.ContextPassingDispatcherConfigurator"
      executor = "fork-join-executor"

      fork-join-executor {
        parallelism-min = 8
        # These actors tends to spend a fair amount of time waiting on IO, so I've doubled this from the
        # default value of 3
        parallelism-factor = 6.0
        parallelism-max = 64
      }
    }

    mailbox.requirements {
      "com.rallyhealth.argosy.ContextPassingMessageQueueSemantics" = local-passing-mailbox
    }
  }

  scheduler {
    implementation = com.rallyhealth.argosy.ContextPassingScheduler
    underlying-implementation = akka.actor.LightArrayResolverScheduler // default
  }
}

#
# Used by play default execution context
#
play {
  akka {
    actor {
      default-dispatcher {
        type = "com.rallyhealth.argosy.ContextPassingDispatcherConfigurator"
        executor = "fork-join-executor"

        fork-join-executor {
          parallelism-min = 8
          # These actors tends to spend a fair amount of time waiting on IO, so I've doubled this from the
          # default value of 3
          parallelism-factor = 6.0
          parallelism-max = 64
        }
      }

      mailbox.requirements {
        "com.rallyhealth.argosy.ContextPassingMessageQueueSemantics" = local-passing-mailbox
      }
    }
    scheduler {
      implementation = com.rallyhealth.argosy.ContextPassingScheduler
      underlying-implementation = akka.actor.LightArrayResolverScheduler // default
    }
  }
  filters {
    headers {
      contentSecurityPolicy = "frame-ancestors 'none'"
    }
  }
}

local-passing-mailbox {
  mailbox-type = "com.rallyhealth.argosy.ContextPassingMailbox"
}

#
# Reactive Mongo
#
mongo-async-driver {
  akka {
    akka.loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = WARNING
  }
  reactive-mongo-context {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 8
      parallelism-factor = 6.0
      parallelism-max = 32
    }
  }
}

# no-cache means check the hash with the server, https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#no-cache_and_no-store
assets.defaultCache="public, max-age=3600, no-cache"

# Swagger
swagger.api.basepath="http://127.0.0.1:18008"
swagger.api.basepath=${?STARSHIP_WEB_BASEURL}

# Enable accept any certificate
ws.acceptAnyCertificate=true

session.cookieName=ENGINE_SESSION